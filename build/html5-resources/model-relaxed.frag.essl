#version 100
precision mediump float;
precision mediump int;

struct PointLight
{
    vec3 position;
    vec3 direction;
    float constant;
    float linear;
    float quadratic;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float cutOff;
    float outerCutOff;
};

struct Material
{
    mediump sampler2D texture_diffuse1;
    mediump sampler2D texture_specular1;
    float shininess;
};

uniform vec3 viewPos;
uniform PointLight pointLight;
uniform Material material;

varying vec3 Normal;
varying vec3 FragPos;
varying vec2 TexCoords;

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    float _distance = length(light.position - fragPos);
    float attenuation = 1.0 / ((light.constant + (light.linear * _distance)) + (light.quadratic * (_distance * _distance)));
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    vec3 ambient = light.ambient * vec3(texture2D(material.texture_diffuse1, TexCoords).xyz);
    vec3 diffuse = (light.diffuse * diff) * vec3(texture2D(material.texture_diffuse1, TexCoords).xyz);
    vec3 specular = (light.specular * spec) * vec3(texture2D(material.texture_specular1, TexCoords).xyz);
    ambient *= (attenuation * intensity);
    diffuse *= (attenuation * intensity);
    specular *= (attenuation * intensity);
    return (ambient + diffuse) + specular;
}

void main()
{
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 result = vec3(0.0);
    PointLight param = pointLight;
    vec3 param_1 = norm;
    vec3 param_2 = FragPos;
    vec3 param_3 = viewDir;
    result += CalcPointLight(param, param_1, param_2, param_3);
    gl_FragData[0] = vec4(result, 1.0);
}

